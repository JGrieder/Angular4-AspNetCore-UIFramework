// scss-lint:disable QualifyingElement, VendorPrefix

//
// Textual form controls
//

@mixin form-group-validation-state($state, $color) {
    .has-#{$state} {
        & .form-control-label {
            color: $color;
        }

        & .form-control-feedback {
            color: $color;
        }

        & .form-control {
            border-color: $color;
        }

        @if ($state == "success") {
            & .form-control-#{$state} {
                background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%2381c04d' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E");
            }
        }

        @if ($state == "warning") {
            & .form-control-#{$state} {
                background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23f9d00d' d='M4.4 5.324h-.8v-2.46h.8zm0 1.42h-.8V5.89h.8zM3.76.63L.04 7.075c-.115.2.016.425.26.426h7.397c.242 0 .372-.226.258-.426C6.726 4.924 5.47 2.79 4.253.63c-.113-.174-.39-.174-.494 0z'/%3E%3C/svg%3E");
            }
        }

        @if ($state == "danger") {
            & .form-control-#{$state} {
                background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23ef553a' viewBox='-2 -2 7 7'%3E%3Cpath stroke='%23ef553a' d='M0 0l3 3m0-3L0 3'/%3E%3Ccircle r='.5'/%3E%3Ccircle cx='3' r='.5'/%3E%3Ccircle cy='3' r='.5'/%3E%3Ccircle cx='3' cy='3' r='.5'/%3E%3C/svg%3E");
            }
        }
    }

    .form-control-#{$state} {
        padding-right: 2.25rem;
        background-repeat: no-repeat;
        background-position: center right .5625rem;
        -webkit-background-size: 1.125rem 1.125rem;
        background-size: 1.125rem 1.125rem;
    }
}

//Moved from Reboot
label {
    // Allow labels to use `margin` for spacing.
    display: inline-block;
    margin-bottom: 0.5rem;
    font-weight: normal
}

.form-control {
    display: block;
    width: 100%;
    // // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    //height: $input-height-base;
    padding: 0.5625rem 0.625rem;
    font-size: 0.75rem;
    line-height: 1.5;
    color: #707980;
    background-color: #fff;
    // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214.
    background-image: none;
    background-clip: padding-box;
    border: 0.0625rem solid #e0e0e0;
    box-shadow: none !important;
    border-radius: .1875rem;

    @if $enable-transitions {
        transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
    }
    // Unstyle the caret on `<select>`s in IE10+.
    &::-ms-expand {
        background-color: transparent;
        border: 0;
    }
    // Customize the `:focus` state to imitate native WebKit styles.
    &:focus {
        background-color: #fff;
        border-color: #2685ee;
    }
    // Placeholder
    &::-moz-placeholder {
        color: #c5cbd1;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        color: #c5cbd1;
    }

    &::-webkit-input-placeholder {
        color: #c5cbd1;
    }

    &::placeholder {
        color: #c5cbd1;
        // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
        opacity: 1;
    }
    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    &:disabled,
    &[readonly] {
        background-color: #eeeeee;
        // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
        opacity: 1;
    }
}

textarea[autosize] {
    resize: none;

    &.hide-overflow-x {
        overflow-x: hidden
    }

    &.word-wrap-break {
        word-wrap: break-word;
    }
}

@include form-group-validation-state("success", #81c04d); //Maverick brand-success
@include form-group-validation-state("warning", #f9d00d); //Maverick brand-warning
@include form-group-validation-state("danger", #ef553a); //Maverick brand-danger

select.form-control {
    padding: 6px 9px 5px 4px;

    &:not([size]):not([multiple]) {
        height: $input-height;
    }

    &:focus::-ms-value {
        // Suppress the nested default white text on blue background highlight given to
        // the selected option text when the (still closed) <select> receives focus
        // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
        // match the appearance of the native widget.
        // See https://github.com/twbs/bootstrap/issues/19398.
        color: $input-color;
        background-color: $input-bg;
    }
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
    display: block;
}


//
// Labels
//

// For use with horizontal and inline forms, when you need the label text to
// align with the form controls.
.col-form-label {
    padding-top: calc(#{$input-btn-padding-y} - #{$input-btn-border-width} * 2);
    padding-bottom: calc(#{$input-btn-padding-y} - #{$input-btn-border-width} * 2);
    margin-bottom: 0; // Override the `<label>` default
}

.col-form-label-lg {
    padding-top: calc(#{$input-btn-padding-y-lg} - #{$input-btn-border-width} * 2);
    padding-bottom: calc(#{$input-btn-padding-y-lg} - #{$input-btn-border-width} * 2);
    font-size: $font-size-lg;
}

.col-form-label-sm {
    padding-top: calc(#{$input-btn-padding-y-sm} - #{$input-btn-border-width} * 2);
    padding-bottom: calc(#{$input-btn-padding-y-sm} - #{$input-btn-border-width} * 2);
    font-size: $font-size-sm;
}


//
// Legends
//

// For use with horizontal and inline forms, when you need the legend text to
// be the same size as regular labels, and to align with the form controls.
.col-form-legend {
    padding-top: $input-btn-padding-y;
    padding-bottom: $input-btn-padding-y;
    margin-bottom: 0;
    font-size: $font-size-base;
}


// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.form-control-plaintext {
    padding-top: $input-btn-padding-y;
    padding-bottom: $input-btn-padding-y;
    margin-bottom: 0; // match inputs if this class comes on inputs with default margins
    line-height: $input-btn-line-height;
    border: solid transparent;
    border-width: $input-btn-border-width 0;

    &.form-control-sm,
    &.form-control-lg {
        padding-right: 0;
        padding-left: 0;
    }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

.form-control-sm {
    padding: $input-btn-padding-y-sm $input-btn-padding-x-sm;
    font-size: $font-size-sm;
    line-height: $input-btn-line-height-sm;
    @include border-radius($input-border-radius-sm);
}

select.form-control-sm {
    &:not([size]):not([multiple]) {
        height: $input-height-sm;
    }
}

.form-control-lg {
    padding: $input-btn-padding-y-lg $input-btn-padding-x-lg;
    font-size: $font-size-lg;
    line-height: $input-btn-line-height-lg;
    @include border-radius($input-border-radius-lg);
}

select.form-control-lg {
    &:not([size]):not([multiple]) {
        height: $input-height-lg;
    }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
    margin-bottom: 1rem;
    display: block;
}

text-field {
    margin-bottom: 1rem;
    display: block;
}

.form-text {
    display: block;
    margin-top: $form-text-margin-top;
}


// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.

.form-row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -5px;
    margin-left: -5px;

    > .col,
    > [class*="col-"] {
        padding-right: 5px;
        padding-left: 5px;
    }
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.form-check {
    position: relative;
    display: block;
    margin-bottom: $form-check-margin-bottom;

    &.disabled {
        .form-check-label {
            color: $text-muted;
        }
    }
}

.form-check-label {
    padding-left: $form-check-input-gutter;
    margin-bottom: 0; // Override default `<label>` bottom margin
}

.form-check-input {
    position: absolute;
    margin-top: $form-check-input-margin-y;
    margin-left: -$form-check-input-gutter;

    &:only-child {
        position: static;
    }
}

// Radios and checkboxes on same line
.form-check-inline {
    display: inline-block;

    .form-check-label {
        vertical-align: middle;
    }

    + .form-check-inline {
        margin-left: $form-check-inline-margin-x;
    }
}


// Form validation
//
// Provide feedback to users when form field values are valid or invalid. Works
// primarily for client-side validation via scoped `:invalid` and `:valid`
// pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for
// server side validation.

.invalid-feedback {
    display: none;
    margin-top: .25rem;
    font-size: .875rem;
    color: $form-feedback-invalid-color;
}

.invalid-tooltip {
    position: absolute;
    top: 100%;
    z-index: 5;
    display: none;
    width: 250px;
    padding: .5rem;
    margin-top: .1rem;
    font-size: .875rem;
    line-height: 1;
    color: #fff;
    background-color: rgba($form-feedback-invalid-color,.8);
    border-radius: .2rem;
}

@include form-validation-state("valid", $form-feedback-valid-color);
@include form-validation-state("invalid", $form-feedback-invalid-color);

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

.form-inline {
    display: flex;
    flex-flow: row wrap;
    align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)
    // Because we use flex, the initial sizing of checkboxes is collapsed and
    // doesn't occupy the full-width (which is what we want for xs grid tier),
    // so we force that here.
    .form-check {
        width: 100%;
    }
    // Kick in the inline
    @include media-breakpoint-up(sm) {
        label {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0;
        }
        // Inline-block all the things for "inline"
        .form-group {
            display: flex;
            flex: 0 0 auto;
            flex-flow: row wrap;
            align-items: center;
            margin-bottom: 0;
        }
        // Allow folks to *not* use `.form-group`
        .form-control {
            display: inline-block;
            width: auto; // Prevent labels from stacking above inputs in `.form-group`
            vertical-align: middle;
        }
        // Make static controls behave like regular ones
        .form-control-static {
            display: inline-block;
        }

        .input-group {
            width: auto;
        }

        .form-control-label {
            margin-bottom: 0;
            vertical-align: middle;
        }
        // Remove default margin on radios/checkboxes that were used for stacking, and
        // then undo the floating of radios and checkboxes to match.
        .form-check {
            display: flex;
            align-items: center;
            justify-content: center;
            width: auto;
            margin-top: 0;
            margin-bottom: 0;
        }

        .form-check-label {
            padding-left: 0;
        }

        .form-check-input {
            position: relative;
            margin-top: 0;
            margin-right: $form-check-input-margin-x;
            margin-left: 0;
        }
    }
}
